/*
 $Id: EjpFile.java,v 1.5 2005/02/22 12:50:08 vauclair Exp $
 
 Copyright (C) 2002-2005 Sebastien Vauclair

 This file is part of Extensible Java Profiler.

 Extensible Java Profiler is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 Extensible Java Profiler is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Extensible Java Profiler; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package ejp.presenter.parser;

import java.io.File;
import java.text.ParseException;

/**
 * Holds information about a data file generated by EJP Tracer.
 * 
 * @author Sebastien Vauclair
 * @version <code>$Revision: 1.5 $<br>$Date: 2005/02/22 12:50:08 $</code>
 */
public class EjpFile
{
  public static final String EJP_FILE_SUFFIX = ".ejp".toLowerCase();

  private static final char THREAD_INDEX_SEPARATOR = '-';

  private static final char SEPARATOR = '_';

  private static final String CLASSLOADER = "Classloader";

  private final File m_file;

  private final String m_timestamp;

  // private final long m_eventCount;

  private final String m_name;

  private final boolean m_classloader;

  public EjpFile(File f_) throws ParseException
  {
    m_file = f_;

    String filename = f_.getName();

    // check suffix
    if (!filename.toLowerCase().endsWith(EJP_FILE_SUFFIX))
    {
      throw new ParseException("Suffix was expected to be \"" + EJP_FILE_SUFFIX + "\"", -1);
    }

    // remove suffix
    filename = filename.substring(0, filename.length() - EJP_FILE_SUFFIX.length());

    // check separator
    int pos = filename.indexOf('_');
    if (pos == -1)
    {
      throw new ParseException("Missing '" + SEPARATOR + "' separator", -1);
    }

    // extract timestamp
    m_timestamp = filename.substring(0, pos);
    if (m_timestamp.length() == 0)
    {
      throw new ParseException("Missing timestamp", -1);
    }

    // extract name
    m_name = filename.substring(pos + 1);
    if (m_name.length() == 0)
    {
      throw new ParseException("Missing name", -1);
    }

    m_classloader = m_name.equals(CLASSLOADER);

    if (!m_classloader)
    {
      pos = m_name.indexOf(THREAD_INDEX_SEPARATOR);
      if (pos == -1)
      {
        throw new ParseException("Missing '" + THREAD_INDEX_SEPARATOR + "' separator", -1);
      }

      pos = m_name.indexOf(SEPARATOR);
    }

    // compute event count
    // TODO reactivate? (need initial byte count)
    // long size = f_.length();
    // if (m_classloader)
    // {
    // m_eventCount = 0;
    // }
    // else
    // {
    // m_eventCount = (size - Constants.VERSION_SIZE) / Constants.ITEM_SIZE;
    // }
  }

  public File getClassloaderFile()
  {
    return new File(m_file.getParentFile(), m_timestamp + SEPARATOR + CLASSLOADER + EJP_FILE_SUFFIX);
  }

  public File getFile()
  {
    return m_file;
  }

  public boolean isClassloader()
  {
    return m_classloader;
  }

  // /**
  // * @return an undefined value iff this file is a classloader output.
  // */
  // public long getEventCount()
  // {
  // return m_eventCount;
  // }

  public String getName()
  {
    return m_name;
  }

  public String getTimestamp()
  {
    return m_timestamp;
  }
}
