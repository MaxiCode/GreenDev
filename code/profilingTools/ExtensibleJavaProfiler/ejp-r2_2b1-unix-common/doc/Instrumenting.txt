$Id: Instrumenting.txt,v 1.3 2005/03/24 09:52:28 vauclair Exp $


This file documents how to use EJP to profile any kind of application running
inside a JVM.

Specific startup scripts are included for JBoss Application Server (see the 
jboss sub-directory).


Adding the EJP library to library path
======================================

Let <ejp home directory> be the location of your EJP installation.

* On Windows, you must add the directory containg tracer.dll to the PATH
  environment variable:

  set PATH="<ejp home directory>\lib";%PATH%
  
* On MacOS X, you must add the directory containg libtracer.jnilib to the 
  DYLD_LIBRARY_PATH environment variable:
  
  export DYLD_LIBRARY_PATH=<ejp home directory>/lib:${DYLD_LIBRARY_PATH}
  
* On all other supported platforms, you must add the directory containg 
  libtracer.so to the LD_LIBRARY_PATH environment variable:
  
  export LD_LIBRARY_PATH=<ejp home directory>/lib:${LD_LIBRARY_PATH}
  

Requesting the JVM to run EJP
=============================

You must add the following argument to your JVM application startup:

-Xruntracer[:config=<path to filter file>]

* standard Java tool from the command line: add the argument just after the 
  java tool name:

  java -Xruntracer 
  
* JBoss from the command line: set the JAVA_OPTS environment variable before
  calling run.bat / run.sh:
  
  set JAVA_OPTS=-Xruntracer
  cd /d <jboss home location>\bin
  call run.bat

* Java application run from Eclipse: add the argument to the "VM arguments" 
  (from the "Arguments" tab of your Launch configuration).
  
If you cannot figure out how to configure EJP for your system, feel free to ask
on Forums or open a Support request on http://ejp.sourceforge.net.


Configuring package/class filters
=================================

By default, all packages and classes are traced. You may optionaly request EJP
to filter out specific packages and/or classes. These filters are defined in a
file that you provide to EJP using the :config=<path to filter file> optional 
argument.

This file contains an ordered list of rules. Filter rules are checked from the 
top down. A rule specifies whether matching classes should be filtered out.

Rule syntax: i|e <qualified class name prefix>
i                   forces inclusion of matching classes
e                   forces exclusion of matching classes
<class-name-prefix> prefix of matching classes

An empty prefix matches all classes.

An implicit "include all" rule is added at the bottom of filter configuration,
i.e. classes are included if not explicitely excluded.

Comments can be added to filter configuration files by starting a line with a
sharp ('#') character.

Examples:

* The following rule list will filter out classes from any java.* package,
  except for those from the java.lang.ref package; trailing dots are added to
  ensure filtering is done on intended package (e.g. "java.lang.ref." pattern
  does not concern the java.lang.reflect package):

  i java.lang.ref.
  e java.
  
* The following rule list will remove all invocations to methods of classes in
  any java.* package, but not to java.lang.String:

  i java.lang.String
  e java.
  i
